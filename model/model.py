import tensorflow as tf
from tensorflow.keras.layers import Input,UpSampling2D,Concatenate
from base_layers import conv1x1,conv3x3,PEP,EP,FCA,decode

def yoloNano(input_size=416,num_classes=1):
    input_0 = Input(shape=(input_size,input_size,3))
    x = conv3x3(filters=12,stride=(1,1))(input_0)
    x = conv3x3(filters=24,stride=(2,2))(x)
    x = PEP(filters=24, neck_filters=7)(x)
    x = EP(filters=70, stride=(2,2))(x)
    x = PEP(filters=70, neck_filters=25)(x)
    x = PEP(filters=70, neck_filters=24)(x)
    x = EP(filters=150, stride=(2, 2))(x)
    x = PEP(filters=150, neck_filters=56)(x)
    x = conv1x1(filters=150)(x)
    x = FCA(reduction_ratio=8)(x)
    x = PEP(filters=150, neck_filters=73)(x)
    x = PEP(filters=150, neck_filters=71)(x)
    x1 = PEP(filters=150, neck_filters=75)(x)
    x = EP(filters=325,stride=(2,2))(x1)
    x = PEP(filters=325,neck_filters=132)(x)
    x = PEP(filters=325,neck_filters=124)(x)
    x = PEP(filters=325,neck_filters=141)(x)
    x = PEP(filters=325,neck_filters=140)(x)
    x = PEP(filters=325,neck_filters=137)(x)
    x = PEP(filters=325,neck_filters=135)(x)
    x = PEP(filters=325, neck_filters=133)(x)
    x2 = PEP(filters=325, neck_filters=140)(x)
    x = EP(filters=545,stride=(2,2))(x2)
    x = PEP(filters=545, neck_filters=276)(x)
    x = conv1x1(filters=230)(x)
    x = EP(filters=489)(x)
    x = PEP(filters=469,neck_filters=213)(x)
    x3 = conv1x1(filters=189)(x)
    x = EP(filters=462)(x3)
    feature_13x13 = conv1x1(filters=3 * (num_classes + 5),bn=False)(x)
    x = conv1x1(filters=105)(x3)
    x = UpSampling2D()(x)
    x = Concatenate()([x,x2])
    x = PEP(filters=325,neck_filters=113)(x)
    x = PEP(filters=207,neck_filters=99)(x)
    x4 = conv1x1(filters=98)(x)
    x = EP(filters=183)(x4)
    feature_26x26 = conv1x1(filters=3 * (num_classes + 5),bn=False)(x)
    x = conv1x1(filters=47)(x4)
    x = UpSampling2D()(x)
    x = Concatenate()([x,x1])
    x = PEP(filters=122,neck_filters=58)(x)
    x = PEP(filters=87,neck_filters=52)(x)
    x = PEP(filters=93,neck_filters=47)(x)
    feature_52x52 = conv1x1(filters=3 * (num_classes + 5),bn=False)(x)

    out_0 = decode(feature_13x13, num_classes, 32, [0,0,0])
    out_1 = decode(feature_26x26, num_classes, 16, [0,0,0])
    out_2 = decode(feature_52x52, num_classes, 8, [0,0,0])

    model = tf.keras.Model(inputs=input_0,outputs=[out_0,out_1,out_2])
    return model

_model = yoloNano(input_size=416,num_classes=1)
# import numpy as np
# img = np.zeros((416,416,3),dtype=np.float32)
# img = img[np.newaxis,:]
# _model(img)
#_model.summary()
#tf.keras.utils.plot_model(_model)